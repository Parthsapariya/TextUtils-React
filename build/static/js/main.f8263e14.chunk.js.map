{"version":3,"sources":["Components/Alert.js","Components/Navbar.js","Components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","showAlert","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f8263e14.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> //this is used for routing */} \r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n              </li>  */}\r\n            </ul>\r\n            <form className=\"d-flex\">\r\n              {/* <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-primary\" type=\"submit\">Search</button> */}\r\n              <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n            </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps ={\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n};","import React, { useState } from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"Uppercase was clicked \" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to UPPERCASE!\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = ()=>{\r\n        // console.log(\"Uppercase was clicked \" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n    }\r\n\r\n    const handleclearClick = ()=>{\r\n        // console.log(\"Uppercase was clicked \" + text);\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text cleard!\", \"success\");\r\n    }\r\n\r\n    const handleCopy = ()=>{\r\n        // console.log(\"I am Copy \" + text);\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = ()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"OnChange was clicked\");\r\n        setText(event.target.value);\r\n        \r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n    // text = \"new text\"; //Wrongg way to change the state\r\n    // setText(\"new text\"); //Correct way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='light'?'black':'white'}}>\r\n            <h1>{props.heading }</h1>\r\n        <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='light'?'white':'#36454F', color: props.mode==='light'?'black':'white'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleclearClick}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='light'?'black':'white'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(\" \").length-1} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes to read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something in the textbox to preview it here.\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}","import { useState } from 'react';\nimport './App.css';\nimport Alert from './Components/Alert';\n// import About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //Whether Dark mode is enable or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n        setAlert({\n          msg: message,\n          type: type\n        })\n        setTimeout(() => {\n          setAlert(null)\n        }, 1500);\n  }\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#002147';\n      showAlert(\"Dark Mode has been enabled\", \"success\");\n      document.title = 'TextUtils - DarkMode';\n      // setInterval(() => {\n      //   document.title = 'TextUtils is Amazing Mode';\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = 'Install TextUtils Now';\n      // }, 1500);\n      // document.body.style.color = 'white'\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode has been enabled\", \"success\");\n      document.title = 'TextUtils - LightMode';\n      // document.body.style.color = 'black'\n    }\n  }\n  return (\n      <>\n    {/* <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\"/> */}\n    {/* <Router>     */}\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    {/* <Switch> */}\n          {/* <Route exact path=\"/about\"> */}\n            {/* <About/> */}\n          {/* </Route> */}\n          {/* <Route exact path=\"/\"> */}\n            <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode}/>\n          {/* </Route> */}\n    {/* </Switch> */}\n    </div>\n    {/* </Router> */}\n      </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}